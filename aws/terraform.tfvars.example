# ------------------------------------------------------------------------------
# This code is part of the TrinityX software suite
# Copyright (C) 2023  ClusterVision Solutions b.v.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# File: aws/terraform.tfvars
# Author: Sumit Sharma
# E-Mail: sumit.sharma@clustervision.com
# Date: 2024-08-05
# Description: This is an example Terraform Variables file. (This is an
#              autogenerated by the Ansible Playbook).
# Version: 1.0.0
# Status: Development
# License: GPL
# ------------------------------------------------------------------------------
# Notes:
# - This is an autogenerated file by the Ansible Playbook in the process of installation.
# - Update the default values will affect the infrastructure which is already created.
# - DO NOT EDIT THIS FILE, IF YOU ARE NOT SURE WHAT YOU ARE DOING.
# ------------------------------------------------------------------------------

# AWS Cloud Modules
aws_network     = true
aws_vpn         = true
aws_storage     = true
aws_image       = true
aws_controller  = true
aws_node        = true

# AWS Credentials
aws_region  = "eu-central-1"
access_key  = "IAMADUMMY-ACCESS-KEY"
secret_key  = "I-AM-A-DUMMY-SECRET-KEY-FOR-DEMO-PURPOSE"

# AWS VPC
aws_vpc_name                    = "TrinityX-Terraform-VPC"
aws_vpc_cidr_block              = "10.1.0.0/16"
aws_vpc_instance_tenancy        = "default"
aws_vpc_enable_dns_support      = true
aws_vpc_enable_dns_hostnames    = true

aws_vpc_subnet_name             = "TrinityX-Terraform-Public-Subnet"
aws_vpc_subnet_cidr_block       = "10.1.0.0/16"
aws_vpc_internet_gateway_name   = "TrinityX-Terraform-Internet-Gateway"

aws_route_table_cidr_block  = "0.0.0.0/0"
aws_route_table_name        = "TrinityX-Terraform-Public-Route-Table"

aws_network_acl_name  = "TrinityX-Terraform-Public-NACL"
aws_network_acl_rules = [
  {
    direction  = "egress"
    protocol   = "udp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 500
    to_port    = 500
  },
  {
    direction  = "egress"
    protocol   = "udp"
    rule_no    = 110
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 4500
    to_port    = 4500
  },
  {
    direction  = "ingress"
    protocol   = "udp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 500
    to_port    = 500
  },
  {
    direction  = "ingress"
    protocol   = "udp"
    rule_no    = 110
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 4500
    to_port    = 4500
  }
]

aws_security_group_name   = "TrinityX-Terraform-VPN-SG"
aws_security_group_rules  = [
  {
    direction   = "ingress"
    from_port   = 500
    to_port     = 500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 4500
    to_port     = 4500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "egress"
    from_port   = 500
    to_port     = 500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "egress"
    from_port   = 4500
    to_port     = 4500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 7050
    to_port     = 7050
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  },
  {
    direction   = "ingress"
    from_port   = 7051
    to_port     = 7051
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
]

# AWS VPN
aws_customer_gateway_name       = "TrinityX-Terraform-VSphere"
aws_customer_gateway_bgp_asn    = 65000
aws_customer_gateway_ip_address = "45.138.39.108"
aws_customer_gateway_type       = "ipsec.1"

aws_vpn_gateway_name  = "TinityX-Terraform-VPG"

aws_vpn_name                      = "TrinityX-Terraform-VPN"
aws_vpn_connection_type           = "ipsec.1"
aws_vpn_static_routes_only        = true
aws_vpn_local_ipv4_network_cidr   = "10.141.0.0/16"
aws_vpn_remote_ipv4_network_cidr  = "10.1.0.0/16"

aws_vpn_connection_route_cidr_block = "10.141.0.0/16"

# AWS S3
aws_s3_bucket_prefix            = "trinityx"
aws_s3_force_destroy            = true
aws_s3_bucket_name_tag          = "TrinityX Bucket"
aws_s3_bucket_env               = "Dev"
aws_s3_bucket_versioning        = "Enabled"
aws_s3_bucket_enc_algorithm     = "AES256"
aws_s3_bucket_key               = true
aws_s3_block_public_acls        = true
aws_s3_block_public_policy      = true
aws_s3_ignore_public_acls       = true
aws_s3_restrict_public_buckets  = true

# AWS Image
aws_s3_object_key_path      = "images/trinityx.vhd"
aws_s3_object_source        = "/trinity/images/trinityx.vhd"
aws_s3_object_content_type  = "application/octet-stream"
aws_s3_object_encryption    = "AES256"

aws_iam_role_name           = "vmimport"
aws_iam_role_policy_version = "2012-10-17"
aws_iam_role_policy_effect  = "Allow"
aws_iam_role_policy_service = "vmie.amazonaws.com"
aws_iam_role_policy_action  = "sts:AssumeRole"

aws_iam_role_policy_ec2_access  = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
aws_iam_role_policy_ec2_role    = "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
aws_iam_role_policy_s3_access   = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
aws_iam_role_policy_s3_read     = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

aws_image_license_type      = "BYOL"
aws_image_boot_mode         = "uefi"
aws_image_description       = "TrinityX-Compute"
aws_image_platform          = "Linux"
aws_image_role              = "vmimport"
aws_image_container_format  = "vhd"
aws_image_containe_desc     = "Rocky9"
